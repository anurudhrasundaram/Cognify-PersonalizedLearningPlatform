npm init -y
npm install express jsonwebtoken bcryptjs cors mysql
const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const cors = require("cors");
const mysql = require("mysql");

const app = express();
const PORT = 5000;

app.use(express.json());
app.use(cors());

// MySQL Database Connection
const db = mysql.createConnection({
  host: "localhost", // Your database host
  user: "root", // Your database username
  password: "", // Your database password
  database: "cognify", // Your database name
});

db.connect((err) => {
  if (err) {
    console.error("Database connection error:", err);
    return;
  }
  console.log("Connected to database");
});

// Register Route
app.post("/register", async (req, res) => {
  const { email, password } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);

  const query = "INSERT INTO users (email, password) VALUES (?, ?)";
  db.query(query, [email, hashedPassword], (err, result) => {
    if (err) return res.status(500).send("Error registering user");
    res.status(201).send("User created successfully");
  });
});

// Login Route
app.post("/login", async (req, res) => {
  const { email, password } = req.body;
  const query = "SELECT * FROM users WHERE email = ?";
  db.query(query, [email], async (err, result) => {
    if (err) return res.status(500).send("Error fetching user");

    if (result.length === 0) return res.status(400).send("User not found");

    const isMatch = await bcrypt.compare(password, result[0].password);
    if (!isMatch) return res.status(400).send("Invalid credentials");

    const token = jwt.sign({ email: result[0].email }, "secretKey", { expiresIn: "1h" });
    res.json({ token });
  });
});

// Middleware for Authentication
const authenticate = (req, res, next) => {
  const token = req.headers["authorization"];
  if (!token) return res.status(403).send("Access Denied");

  jwt.verify(token, "secretKey", (err, user) => {
    if (err) return res.status(403).send("Invalid Token");
    req.user = user;
    next();
  });
};

// Protected Route: Dashboard
app.get("/dashboard", authenticate, (req, res) => {
  const query = "SELECT * FROM progress WHERE email = ?";
  db.query(query, [req.user.email], (err, result) => {
    if (err) return res.status(500).send("Error fetching user progress");
    res.json(result);
  });
});

// Course Route (Dummy Data)
app.get("/course/:id", (req, res) => {
  const courseData = {
    1: { title: "Course 1", description: "Course 1 description" },
    2: { title: "Course 2", description: "Course 2 description" },
  };

  const course = courseData[req.params.id];
  if (course) {
    res.json(course);
  } else {
    res.status(404).send("Course not found");
  }
});

// Progress Tracking Route
app.post("/progress", authenticate, (req, res) => {
  const { module, progress } = req.body;
  const query = "INSERT INTO progress (email, module, progress) VALUES (?, ?, ?)";
  db.query(query, [req.user.email, module, progress], (err, result) => {
    if (err) return res.status(500).send("Error updating progress");
    res.send("Progress updated");
  });
});

// Start Server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
